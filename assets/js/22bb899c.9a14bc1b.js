"use strict";(self.webpackChunkreact_native_reanimated_docs=self.webpackChunkreact_native_reanimated_docs||[]).push([[6752],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=o,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},759:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i={id:"scrollTo",title:"scrollTo",sidebar_label:"scrollTo"},l=void 0,c={unversionedId:"api/nativeMethods/scrollTo",id:"api/nativeMethods/scrollTo",isDocsHomePage:!1,title:"scrollTo",description:"Provides synchronous scroll on the UI thread to a given offset using an animated ref to a scroll view. This allows performing smooth scrolling without lags(which might occur when it would be asynchronous and based on a lot of events).",source:"@site/docs/api/nativeMethods/scrollTo.md",sourceDirName:"api/nativeMethods",slug:"/api/nativeMethods/scrollTo",permalink:"/react-native-reanimated/docs/next/api/nativeMethods/scrollTo",version:"current",frontMatter:{id:"scrollTo",title:"scrollTo",sidebar_label:"scrollTo"},sidebar:"docs",previous:{title:"measure",permalink:"/react-native-reanimated/docs/next/api/nativeMethods/measure"},next:{title:"Custom Animations",permalink:"/react-native-reanimated/docs/next/api/LayoutAnimations/customAnimations"}},s=[{value:"Arguments",id:"arguments",children:[]},{value:"Returns",id:"returns",children:[]},{value:"Example",id:"example",children:[]}],u={toc:s};function d(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Provides synchronous scroll on the UI thread to a given offset using an animated ref to a scroll view. This allows performing smooth scrolling without lags(which might occur when it would be asynchronous and based on a lot of events)."),(0,a.kt)("p",null,"This function is implemented on native platforms only. On the web it's sufficient to use a standard version of the ",(0,a.kt)("inlineCode",{parentName:"p"},"scrollTo")," which comes with a ",(0,a.kt)("inlineCode",{parentName:"p"},"ScrollView")," component(it's ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/facebook/react-native/blob/aebccd3f923c920bd85fb9e5fbdd2a8a75d3ad3d/Libraries/Components/ScrollView/ScrollView.js#L834"},"here"),"). In such a case it should be invoked in the following way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const aref = useAnimatedRef();\naref.current.scrollTo({ x, y });\n")),(0,a.kt)("h3",{id:"arguments"},"Arguments"),(0,a.kt)("h4",{id:"animatedref"},(0,a.kt)("inlineCode",{parentName:"h4"},"animatedRef")),(0,a.kt)("p",null,"The product of ",(0,a.kt)("a",{parentName:"p",href:"../hooks/useAnimatedRef"},(0,a.kt)("inlineCode",{parentName:"a"},"useAnimatedRef"))," which is a Reanimated's extension of a standard React's ref(delivers view tag on the UI thread)."),(0,a.kt)("h4",{id:"x-cord-float"},(0,a.kt)("inlineCode",{parentName:"h4"},"x-cord")," ","[Float]"),(0,a.kt)("p",null,"Corresponds to the pixel along the horizontal axis of the element that you want displayed in the upper left."),(0,a.kt)("h4",{id:"y-cord-float"},(0,a.kt)("inlineCode",{parentName:"h4"},"y-cord")," ","[Float]"),(0,a.kt)("p",null,"Corresponds to the pixel along the vertical axis of the element that you want displayed in the upper left."),(0,a.kt)("h4",{id:"animated-boolean"},(0,a.kt)("inlineCode",{parentName:"h4"},"animated")," ","[Boolean]"),(0,a.kt)("p",null,"Indicates whether the scroll should be smooth."),(0,a.kt)("h3",{id:"returns"},"Returns"),(0,a.kt)("p",null,"void"),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react'\nimport { TouchableOpacity, View, Text, ScrollView } from 'react-native'\nimport { useAnimatedRef, useDerivedValue, useSharedValue, scrollTo } from 'react-native-reanimated'\n\nconst ITEM_COUNT = 10\nconst ITEM_SIZE = 100\nconst ITEM_MARGIN = 10\n\nexport const Comp = () => {\n  const aref = useAnimatedRef()\n  const scroll = useSharedValue(0)\n\n  useDerivedValue(() => {\n    scrollTo(aref, 0, scroll.value * (ITEM_SIZE + 2 * ITEM_MARGIN), true)\n  })\n\n  const items = Array.from(Array(ITEM_COUNT).keys())\n\n  const Incrementor = ({ increment }) => (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <TouchableOpacity\n        onPress={() => {\n          scroll.value =\n            scroll.value + increment > 0 ? scroll.value + increment : ITEM_COUNT - 1 + increment\n\n          if (scroll.value >= ITEM_COUNT - 2) scroll.value = 0\n        }}>\n        <Text>{`Scroll ${Math.abs(increment)} ${increment > 0 ? 'down' : 'up'}`}</Text>\n      </TouchableOpacity>\n    </View>\n  )\n\n  return (\n    <View style={{ flex: 1, flexDirection: 'column' }}>\n      <Incrementor increment={1} />\n      <View style={{ width: '100%', height: (ITEM_SIZE + 2 * ITEM_MARGIN) * 2 }}>\n        <ScrollView ref={aref} style={{ backgroundColor: 'orange' }}>\n          {items.map((_, i) => (\n            <View\n              key={i}\n              style={{\n                backgroundColor: 'white',\n                aspectRatio: 1,\n                width: ITEM_SIZE,\n                margin: ITEM_MARGIN,\n                justifyContent: 'center',\n                alignContent: 'center',\n              }}>\n              <Text style={{ textAlign: 'center' }}>{i}</Text>\n            </View>\n          ))}\n        </ScrollView>\n      </View>\n\n      <Incrementor increment={-1} />\n    </View>\n  )\n}\n")))}d.isMDXComponent=!0}}]);