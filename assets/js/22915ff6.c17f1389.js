"use strict";(self.webpackChunkreact_native_reanimated_docs=self.webpackChunkreact_native_reanimated_docs||[]).push([[442],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),u=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=u(a),d=r,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||l;return a?n.createElement(f,o(o({ref:t},s),{},{components:a})):n.createElement(f,o({ref:t},s))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1543:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return u}});var n=a(3117),r=(a(7294),a(3905));const l={id:"useFrameCallback",title:"useFrameCallback",sidebar_label:"useFrameCallback"},o=void 0,i={unversionedId:"api/hooks/useFrameCallback",id:"api/hooks/useFrameCallback",title:"useFrameCallback",description:"This hook allows you to run a piece of code on every frame update.",source:"@site/docs/api/hooks/useFrameCallback.md",sourceDirName:"api/hooks",slug:"/api/hooks/useFrameCallback",permalink:"/react-native-reanimated/docs/next/api/hooks/useFrameCallback",draft:!1,tags:[],version:"current",frontMatter:{id:"useFrameCallback",title:"useFrameCallback",sidebar_label:"useFrameCallback"},sidebar:"docs",previous:{title:"useEvent",permalink:"/react-native-reanimated/docs/next/api/hooks/useEvent"},next:{title:"useHandler",permalink:"/react-native-reanimated/docs/next/api/hooks/useHandler"}},c={},u=[{value:"Arguments",id:"arguments",level:3},{value:"<code>callback</code> Function",id:"callback-function",level:4},{value:"<code>autostart</code> boolean",id:"autostart-boolean",level:4},{value:"Returns",id:"returns",level:3},{value:"Types",id:"types",level:3},{value:"<code>FrameCallback: [object]</code>",id:"framecallback-object",level:4},{value:"Example",id:"example",level:2}],s={toc:u};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This hook allows you to run a piece of code on every frame update."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"useFrameCallback(updater: () => void, autostart: boolean = true) => [FrameCallback]\n")),(0,r.kt)("h3",{id:"arguments"},"Arguments"),(0,r.kt)("h4",{id:"callback-function"},(0,r.kt)("inlineCode",{parentName:"h4"},"callback")," ","[Function]"),(0,r.kt)("p",null,"Single worklet that will be called on every frame update without any arguments."),(0,r.kt)("h4",{id:"autostart-boolean"},(0,r.kt)("inlineCode",{parentName:"h4"},"autostart")," ","[boolean]"),(0,r.kt)("p",null,"Optional boolean that specifies if the callback should start running when\nregistration is complete. This argument defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("h3",{id:"returns"},"Returns"),(0,r.kt)("p",null,"An object of type ",(0,r.kt)("inlineCode",{parentName:"p"},"FrameCallback")," which allows you to read and control the\ncallback state."),(0,r.kt)("h3",{id:"types"},"Types"),(0,r.kt)("h4",{id:"framecallback-object"},(0,r.kt)("inlineCode",{parentName:"h4"},"FrameCallback: [object]")),(0,r.kt)("p",null,"Properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setActive: (isActive: boolean) => void"),": begins / stops listening for frame updates"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isActive: boolean"),": indicates whether the callback is active (",(0,r.kt)("inlineCode",{parentName:"li"},"true"),")\nor not (",(0,r.kt)("inlineCode",{parentName:"li"},"false"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"callbackId: number"),": a unique identifier of the callback function")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"{13-16}","{13-16}":!0},"import Animated, {\n  useAnimatedStyle,\n  useFrameCallback,\n  useSharedValue,\n} from 'react-native-reanimated';\nimport {Button, View} from 'react-native';\n\nimport React from 'react';\n\nexport default function FrameCallbackExample() {\n  const x = useSharedValue(0);\n\n  const frameCallback = useFrameCallback(() => {\n    // Move the box by one pixel on every frame\n    x.value += 1;\n  }, false);\n\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateX: x.value,\n        }\n      ],\n    };\n  });\n\n  return (\n    <View>\n      <Animated.View style={[styles.box, animatedStyle1]} />\n      <Button title={'Start/stop'} onPress={() => frameCallback.setActive(!frameCallback.isActive)}>\n    </View>\n  );\n}\n")))}p.isMDXComponent=!0}}]);